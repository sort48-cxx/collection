
//执行上下文栈

全局执行上下文

执行上下文

压入

弹出

ECStack

==============

变量对象

存储在执行上下文中定义的变量和函数声明 （全局上下文、函数上下文）

全局上下文的变量对象 = 全局对象

函数上下文的变量对象 = 活动对象 ：只有到当进入一个执行上下文中，这个执行上下文的变量对象才会被激活，而只有被激活的变量对象，也就是活动对象上的各种属性才能被访问


===

执行上下文

 -进入执行上下文

		step1：函数的所有形参 

				由名称和对应值组成的一个变量对象的属性被创建
				没有实参属性的值设为undefined

		step2：函数声明

				由名称和对应值（函数对象（function-object））组成一个变量对象的属性被创建
				如果变量对象已经存在相同名称的属性，则完全替换这个属性

		step3：变量声明

				由名称和对应值（undefined）组成一个变量对象的属性被创建
				如果变量名称跟已经声明的形式参数或者函数相同，则变量声明不会干扰已经存在的这类属性
-代码执行

	在代码执行阶段，会顺序执行代码，根据代码，修改变量对象的值

		step4：在代码执行阶段，会再次修改变量对象的属性值


===

作用域链
	由多个执行上下文的变量对象构成的链表

	函数创建
	```
	function foo() {
		function bar() {
			...
		}
	}

	foo.[[scope]] = [
		globalContext.VO
	];

	bar.[[scope]] = [
		fooContext.AO,
		globalContext.VO
	];
	```

	函数激活

	```
	Scope = [AO].concat([[Scope]]);
	```


-总结 

	step1：函数被创建，保存作用域链到内部属性[[scope]]

	step2:执行函数，创建函数执行上下文，函数执行上下文被压入执行上下文栈

	step3：函数并不会立即执行，开始做准备工作

			- 复制函数[[scope]]属性，创建作用域链
			- 用arguments创建活动对象，随后初始化活动对象，加入形参，函数声明，变量声明
			- 将活动对象压入函数作用域顶端  // Scope = [AO].concat([[Scope]]); 
	
	step4：准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值

	step5：函数执行完毕，函数执行上下文从执行上下文栈中弹出

==============

this
 
	step1：计算MemberExpression的结果赋值给ref

		- 原始表达式
		- 函数定义表达式
		- 属性访问表达式
		- 对象创建表达式

	step2：判断ref是不是一个Reference 类型

		-如果 ref 是 Reference，并且 IsPropertyReference(ref) 是 true, 那么 this 的值为 GetBase(ref)

		-如果 ref 是 Reference，并且 base value 值是 Environment Record, 那么this的值为 ImplicitThisValue(ref)

		-如果 ref 不是 Reference，那么 this 的值为 undefined